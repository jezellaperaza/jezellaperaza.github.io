
model {

# Priors and constraints
for (i in 1:M){
  for (t in 1:(n.occ-1)){
    phi[i,t] <- mean.phi[t]
  } 
  for (t in 1:n.occ){
    p[i,t] <- mean.p
  }
}

for (t in 1:(n.occ-1)) {
mean.phi[t] ~ dbeta(1,1)

}

mean.p ~ dbeta(1,1)    
psi ~ dbeta(1,1)       
    
# Dirichlet prior for entry probabilities
for (t in 1:n.occ){
  beta[t] ~ dgamma(1, 1)
  b[t] <- beta[t] / sum(beta[1:n.occ]) # force the sum to 1 constraint # b = (0.2,0.2,0.2,0.2,0.2)
}
    
# Get conditional entry probability
nu[1] <- b[1]
for (t in 2:n.occ){
  nu[t] <- b[t] / (1-sum(b[1:(t-1)])) # force the sum to 1 constraint
} 
    
# Likelihood
for (i in 1:M){
  # First occasion
  # State process
  w[i] ~ dbern(psi)                  # Draw latent inclusion
  z[i,1] ~ dbern(nu[1]) # in pop is beta1

  # Subsequent occasions
  for (t in 2:n.occ){
    # State process
    q[i,t-1] <- 1-z[i,t-1] # after the first occasion
    mu2[i,t] <- phi[i,t-1] * z[i,t-1] + nu[t] * prod(q[i,1:(t-1)]) 
    z[i,t] ~ dbern(mu2[i,t])
    # Observation process
  } #t
  for(t in 1:n.occ){
    # Observation process
    mu3[i,t] <- z[i,t] * p[i,t] * w[i] # real individ, in population, and detected # if zero whole thing is zero
    y[i,t] ~ dbern(mu3[i,t]) 
  }
} #i

# Calculate derived population parameters
for (i in 1:M){
  for (t in 1:n.occ){
    u[i,t] <- z[i,t]*w[i]     # Deflated latent state (u) # in population is z and w is 1
  }
}
for (i in 1:M){
  recruit[i,1] <- u[i,1]
  for (t in 2:n.occ){
    recruit[i,t] <- (1-u[i,t-1]) * u[i,t] # when did I recruit, can only recuit once
  } #t
} #i
for (t in 1:n.occ){
  N[t] <- sum(u[1:M,t])        # Actual population size # sum of individuals given a 1 at each occasion
  B[t] <- sum(recruit[1:M,t])  # Number of entries # number of individs recruited at that time
} #t
for (i in 1:M){ # keeps from counting an individ twice
  Nind[i] <- sum(u[i,1:n.occ])
  Nalive[i] <- 1-equals(Nind[i], 0) # sum of individs that are at least one
} #i
Nsuper <- sum(Nalive[])         # Superpopulation size

}
